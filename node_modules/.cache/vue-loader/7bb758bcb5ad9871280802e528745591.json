{"remainingRequest":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ivan/Documents/cours/Web/S2/projet/soviet_google/src/App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/src/App.vue","mtime":1619112324967},{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/css-loader/dist/cjs.js","mtime":1618999066897},{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1618999068517},{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/postcss-loader/src/index.js","mtime":1618999067867},{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/cache-loader/dist/cjs.js","mtime":1618999066567},{"path":"/home/ivan/Documents/cours/Web/S2/projet/soviet_google/node_modules/vue-loader/lib/index.js","mtime":1618999068517}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5wYWdlLWNvbnRhaW5lciA+IC5tZC1jb250ZW50Lm1kLXRoZW1lLWRlZmF1bHQgewogIGJhY2tncm91bmQtY29sb3I6ICMzMDMwMzA7Cn0KOnJvb3QgewogIC0tY29sb3I6ICIiOwogIC0tZm9udENvbG9yOiAiIzAwMDAwMCI7Cn0KCi5tZC1jYXJkLm1kLXRoZW1lLWRlZmF1bHQubWQtd2l0aC1ob3Zlci5kcmFnLWRyYWdnYWJsZSB7CiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpOwogIGNvbG9yOiB2YXIoLS1mb250Q29sb3IpOwp9Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div class=\"page-container\">\n    <SwitchDisplay\n      @addWidgetSlavic=\"addSlavicWeather\"\n      @addCominternPictures=\"addCominternPictures\"\n      @addComradeMichel=\"addComradeMichel\"\n      @addPropaganda=\"addPropaganda\"\n      @addTimeTravel=\"addTimeTravel\"\n      @addVideoCollectivization=\"addVideoCollectivization\"\n      @updateColor=\"updateColor\"\n      @saveConfiguration=\"saveConfiguration\"\n    />\n    <md-content>\n      <component\n        v-for=\"(component, index) in widgets\"\n        :key=\"index\"\n        :is=\"component\"\n        v-on:delete-widget=\"deleteWidget(index)\"\n      />\n    </md-content>\n  </div>\n</template>\n\n<script>\nimport SwitchDisplay from \"./components/SwitchDisplay\";\nimport Widget from \"./components/Widget\";\nimport SlavicWeather from \"./components/SlavicWeather\";\nimport CominternPictures from \"./components/CominternPictures\";\nimport ComradeMichel from \"./components/ComradeMichel\";\nimport Propaganda from \"./components/Propaganda\";\nimport TimeTravelMachine from \"./components/TimeTravelMachine\";\nimport VideoCollectivization from \"./components/VideoCollectivization\";\n\nconst WidgetTemplate = {\n  template: Widget.template,\n};\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      widgets: [WidgetTemplate],\n      color: \"#ff0000\",\n      storedWidgets: [\n        {\n          name: \"SlavicWeather\",\n          component: SlavicWeather,\n        },\n        {\n          name: \"CominternPictures\",\n          component: CominternPictures,\n        },\n        {\n          name: \"Propaganda\",\n          component: Propaganda,\n        },\n        {\n          name: \"ComradeMichel\",\n          component: ComradeMichel,\n        },\n        {\n          name: \"TimeTravelMachine\",\n          component: TimeTravelMachine,\n        },\n        {\n          name: \"VideoCollectivization\",\n          component: VideoCollectivization,\n        },\n      ],\n    };\n  },\n  components: {\n    SwitchDisplay,\n  },\n  methods: {\n    addSlavicWeather() {\n      this.widgets.push(SlavicWeather);\n    },\n    addCominternPictures() {\n      this.widgets.push(CominternPictures);\n    },\n    addComradeMichel() {\n      this.widgets.push(ComradeMichel);\n    },\n    addPropaganda() {\n      this.widgets.push(Propaganda);\n    },\n    addTimeTravel() {\n      this.widgets.push(TimeTravelMachine);\n    },\n    addVideoCollectivization() {\n      this.widgets.push(VideoCollectivization);\n    },\n    deleteWidget(index) {\n      this.widgets.splice(index, 1);\n    },\n    updateColor(value) {\n      let root = document.documentElement;\n      root.style.setProperty(\"--color\", value);\n      this.getContrastYIQ(value);\n    },\n    /*Script permettant de calculer le contraste de l'arrière-plan des widgets. On ajuste la couleur de la police en fonction.\n    Source: https://24ways.org/2010/calculating-color-contrast*/\n    getContrastYIQ(couleurFond) {\n      let root = document.documentElement;\n      couleurFond = couleurFond.replace(\"#\", \"\");\n      var r = parseInt(couleurFond.substr(0, 2), 16);\n      var g = parseInt(couleurFond.substr(2, 2), 16);\n      var b = parseInt(couleurFond.substr(4, 2), 16);\n      var contraste = (r * 299 + g * 587 + b * 114) / 1000;\n      contraste >= 128\n        ? root.style.setProperty(\"--fontColor\", \"#000000\")\n        : root.style.setProperty(\"--fontColor\", \"#ffffff\");\n    },\n    /* Méthode permettant l'enregistrement dans le local storage */\n    saveConfiguration() {\n      let root = document.documentElement;\n      const parsedWidgets = JSON.stringify(this.widgets);\n      localStorage.setItem(\"widgets\", parsedWidgets);\n      localStorage.choosenColor = root.style.getPropertyValue(\"--color\");\n      localStorage.fontColor = root.style.getPropertyValue(\"--fontColor\");\n      alert(\"Les données ont bien été sauvegardées\");\n    },\n  },\n  mounted() {\n    /* Lors de la création de la vue, on vérifie dans le local storage si des informations avaient été enregistrées */\n    if (localStorage.getItem(\"widgets\")) {\n      try {\n        /* Si les informations sont bien présentes, on recréer les widgets enregistrés */\n        let parsedWidgets = JSON.parse(localStorage.getItem(\"widgets\"));\n        console.log(\"Lecture des widgets enregistrés : \" + (parsedWidgets.length-1).toString());\n\n        parsedWidgets.forEach((parsedW) => {\n          this.storedWidgets.forEach((storedW) => {\n            if (parsedW.name == storedW.name) {\n              console.log(\" Succès: \" + parsedW.name);\n              this.widgets.push(storedW[\"component\"]);\n            }\n          });\n        });\n\n        /* On vérifie également que les couleurs ont bien été stockées, et on les réutilise */\n        let root = document.documentElement;\n        if (localStorage.choosenColor) {\n          root.style.setProperty(\"--color\", localStorage.choosenColor);\n          console.log(\n            \"La couleur a bien été chargée: \" + localStorage.choosenColor\n          );\n        }\n        if (localStorage.fontColor) {\n          root.style.setProperty(\"--fontColor\", localStorage.fontColor);\n        }\n      } catch (e) {\n        /* Si les données sont corrompues, on les supprime du localStorage */\n        localStorage.removeItem(\"widgets\");\n        alert(\"Les données sauvegardées sont corrompues\");\n      }\n    }\n  },\n};\n</script>\n\n<style>\n.page-container > .md-content.md-theme-default {\n  background-color: #303030;\n}\n:root {\n  --color: \"\";\n  --fontColor: \"#000000\";\n}\n\n.md-card.md-theme-default.md-with-hover.drag-draggable {\n  background-color: var(--color);\n  color: var(--fontColor);\n}\n</style>\n"]}]}